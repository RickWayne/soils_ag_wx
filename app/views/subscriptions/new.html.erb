<% content_for :title do %>
  <%= @title %>
<% end %>

<% content_for :stylesheet do %>
  <%= stylesheet_link_tag "style" -%>
  <style type='text/css'>
    #map {
    	   width: 95%;
    	   height: 600px;
    	   border: 1px solid gray;
       }
  </style>
<% end %>

<% content_for :scripts do %>
  <script src="http://maps.google.com/maps/api/js?sensor=false&v=3"></script>
  <script src="http://openlayers.org/api/2.11/OpenLayers.js"></script>
  <script>

  $(document).ready(function() {
    init(window.location.href);
  });

  // make map available for easy debugging
  var map;
  var googleProj;
  var latLongProj;
  var AUTH_TOKEN = '<%= form_authenticity_token %>';

  // Adapted from the OpenLayers Click Handler Example (OL 2.1)
  OpenLayers.Control.Click = OpenLayers.Class(OpenLayers.Control, {                
    defaultHandlerOptions: {
        'single': true,
        'double': false,
        'pixelTolerance': 0,
        'stopSingle': false,
        'stopDouble': false
    },

    initialize: function(options) {
        this.handlerOptions = OpenLayers.Util.extend(
            {}, this.defaultHandlerOptions
        );
        OpenLayers.Control.prototype.initialize.apply(
            this, arguments
        ); 
        this.handler = new OpenLayers.Handler.Click(
            this, {
                'click': this.onClick,
                'dblclick': this.onDblclick 
            }, this.handlerOptions
        );
    }, 

    onClick:     function(e) {
      alert("click");
    },

    onDblclick: function(evt) {  
        var output = document.getElementById(this.key + "Output");
        var msg = "dblclick " + evt.xy;
        output.value = output.value + msg + "\n";
    }   

  });
  
  function createURLFrom(newURL) {
    return newURL.substr(0,newURL.lastIndexOf('/'));
  }

  function init(baseURL) {
    var googleProj = new OpenLayers.Projection("EPSG:900913");
    var latLongProj = new OpenLayers.Projection("EPSG:4326");
    
    var createURL = createURLFrom(baseURL);

  	ll = new OpenLayers.LonLat(-98.0, 42.0);
  	ll.transform(latLongProj,googleProj);
  	ur = new OpenLayers.LonLat(-86.0, 50.0);
  	ur.transform(latLongProj,googleProj);
	
    var wiMnBounds = new OpenLayers.Bounds(ll.lon,ll.lat,ur.lon,ur.lat);
    /**
     * The commercial layers (Google, Virtual Earth, and Yahoo) are
     * in a custom projection - we're calling this Spherical Mercator.
     * GeoServer understands that requests for EPSG:900913 should
     * match the projection for these commercial layers.  Note that
     * this is not a standard EPSG code - so, if you want to load
     * layers from another WMS, it will have to be configured to work
     * with this projection.
     */
    var options = {
      // the "community" epsg code for spherical mercator
      projection: "EPSG:900913",
      // map horizontal units are meters
      units: "m",
      // this resolution displays the globe in one 256x256 pixel tile
      // maxResolution: 156543.0339,
      maxExtent: wiMnBounds
    };
  
    map = new OpenLayers.Map('map', options);
    // create Google Roads layer
    var groads = new OpenLayers.Layer.Google(
      "Google Hybrid",
      {
        'type': google.maps.MapTypeId.HYBRID,
        'sphericalMercator': true,
        'minZoomLevel': 7
      }
    );
    map.addLayers([groads]);
    center = new OpenLayers.LonLat(-92.3,46.0);
    center.transform(latLongProj,googleProj);
  
    map.events.register('click', map,
      function(e) {
        
        xy = e.xy;
        var lonlat = map.getLonLatFromViewPortPx(xy);
        if (wiMnBounds.containsLonLat(lonlat)) {
          var point = new OpenLayers.Geometry.Point(lonlat.lon, lonlat.lat);
          point.transform(googleProj,latLongProj);
          // get the subscriber ID
          var subscriber_id = document.getElementById('subscriber_id').value;
          // get the desired product
          var e = document.getElementById("product");
          var product_id = e.options[e.selectedIndex].value;
          var ok=confirm("Subscribe to "+point.x+", "+point.y+"?");
          if (ok==true) {
            $.ajax(
              {
                type: "POST",
                url: createURL + "?&authenticity_token=" + AUTH_TOKEN,
                async: false,
                data: {
                  'subscription[latitude]':point.y,'subscription[longitude]':point.x,
                  'subscription[subscriber_id]':subscriber_id,
                  'subscription[product_id]':product_id,
                  format:'html'},
                dataType: 'html',
                success: function(json)
                {
                  sr = document.getElementById('subscribed');
                  sr.innerHTML = html;
                  // $('#summary_results').innerHTML = html;
                }
              });
            } else {
              alert('Subscription cancelled');
            }
        } else {
          alert('Point is outside our data. Please choose a point closer to the center of the map.');
        }
      }
    );
    map.setCenter(center,1);
  }
  </script>
<% end %>

<% content_for :welcome do %>
  <h2>New Subscription</h2>
  <%= image_tag "Cranb.rebecca.jpg", 
    {:width => "130", :height => "88", :alt => "Soil Science", 
     :style => "float:right; margin-left: 1em; margin-right: 0.5em"}%>
     <p>This page lets you sign up for automated emails.
     </p>	
     <p>&nbsp;</p>
<% end %>

<h4>New Subscription</h4>
<input type="hidden" id="subscriber_id" value="<%= @subscriber[:id] %>"/>

<div id='subscribed'>
  <%= render partial: 'partials/subscriptions' %>
</div>
<select id="product">
  <%= options_for_select @products.map { |p| [p[:name],p[:id]] }%>
</select>
<p>To register for a new automated product email, <strong>click on the globe in the grey panel below</strong> to make the map appear. Then navigate to your location using the +/- zoom buttons and the directional arrows, and click on the location desired.
</p><div id="map"></div>